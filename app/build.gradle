apply plugin: 'com.android.application'

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.fs.dexdemo"
        minSdkVersion 15
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:28.0.0-rc02'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'

    implementation 'io.reactivex:rxandroid:1.2.1'
    implementation 'com.tbruyelle.rxpermissions:rxpermissions:0.9.4@aar'
}

task clearJar(type: Delete) {
    delete 'libs/dynamic.jar'
}

task makeJar(type: org.gradle.api.tasks.bundling.Jar) {
    // 指定生成的jar名
    baseName 'dynamic'
    // 从哪里打包class文件
    from('build/intermediates/classes/debug/com/fs/dexdemo/dynamic/impl/')
    // 打包到jar后的目录结构
    into('com/fs/dexdemo/dynamic/impl/')
    // 去掉不需要打包的目录和文件
    exclude('test/', 'Dynamic.class', 'BuildConfig.class', 'R.class')
    // 去掉R$开头的文件
    exclude { it.name.startsWith('R$') }
}
makeJar.dependsOn(clearJar, build)

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())
String sdkDir = properties.getProperty("sdk.dir")
task makeDex() {
    doFirst {
        exec {
            workingDir "build/libs"
            commandLine "${sdkDir}/build-tools/27.0.3/dx",   \
                '--dex', '--output=dynamic_dex.jar', 'dynamic.jar'
        }

        // project.delete
        // encrypt.execute()

        copy {
            from 'build/libs/dynamic_dex.jar'
            into 'src/main/assets'
        }
    }
}
makeDex.dependsOn(makeJar)

task encrypt(type: JavaExec) {
    classpath 'build/intermediates/classes/debug'
    main = 'com.fs.dexdemo.utils.Encrypter'
    args '-encrypt', 'build/libs', 'build/libs/dynamic_dex.jar'
}

task decrypt(type: JavaExec) {
    classpath 'build/intermediates/classes/debug'
    main = 'com.fs.dexdemo.utils.Encrypter'
    args '-decrypt', 'build/libs', 'build/libs/dynamic_dex.jar.encrypted'
}